<resources>
    <string name="appName">My Application</string>
    <string name="titleProductDetails">Product details</string>
    <string name="titleProductsList">Products list</string>
    <string name="noDataAvailable">Data not available,\n please try again later</string>
    <string name="retry">Retry</string>
    <string name="aboutProject">About Project</string>
    <string name="aboutProjectText"><![CDATA[<h2><strong>About application<br /></strong></h2>
                                        <p>&nbsp;</p>
                                        <p>Application that displays the list of products.</p>
                                        <p>&nbsp;</p>
                                        <h2><strong>Summary</strong></h2>
                                        <p>&nbsp;</p>
                                        <ul>
                                        <li><strong><em>Language</em></strong> - Kotlin.</li>
                                        <li><strong><em>Architectural pattern - </em></strong>MVVM</li>
                                        </ul>
                                        <h2>&nbsp;</h2>
                                        <h2><strong>Application screens</strong></h2>
                                        <p>&nbsp;</p>
                                        <ul>
                                        <li><strong><em>Products List Screen</em></strong> - display list of products fetched from the internet or database.</li>
                                        <li><strong><em>Product Details Screen - </em></strong>display details about product that was choosed from the list</li>
                                        <li><strong><em>About Application Screen -&nbsp;</em></strong>you are currently here</li>
                                        </ul>
                                        <h2>&nbsp;</h2>
                                        <h2><strong>Libraries used during development</strong></h2>
                                        <p>&nbsp;</p>
                                        <ul>
                                        <li><strong><em>ViewModel&nbsp;</em></strong>- class is designed to store and manage UI-related data in a lifecycle conscious way.</li>
                                        <li><strong><em>LiveData - </em></strong>is an observable data holder class.</li>
                                        <li><strong><strong><em>Room -&nbsp;</em></strong></strong>provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.</li>
                                        <li><strong><em>Material -&nbsp;</em></strong>view components</li>
                                        <li><strong><em>Navigation - </em></strong>refers to the interactions that allow users to navigate across, into, and back out from the different pieces of content within app.</li>
                                        <li><strong><em>Retrofit -&nbsp;</em></strong>type-safe HTTP client for Android.</li>
                                        <li><strong><em>Coroutines - </em></strong>is a concurrency design pattern that can be used on Android to simplify code that executes asynchronously.</li>
                                        <li><strong><em>GSON - </em></strong>is a Java library that can be used to convert Java Objects into their JSON representation.</li>
                                        <li><strong><em>OkHttp - </em></strong>is an open source project designed to be an efficient HTTP client.</li>
                                        <li><strong><strong><em>Glide -&nbsp;</em></strong></strong>is a fast and efficient open source media management and image loading framework for Android that wraps media decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.</li>
                                        </ul>
                                        <h2>&nbsp;</h2>
                                        <h2><strong>Steps to "productize" the implementation&nbsp;</strong></h2>
                                        <p>&nbsp;</p>
                                        <ul>
                                        <li><strong><em>Clean Architecture&nbsp;</em></strong>- to organizing the project so that it\'s easy to understand and easy to change as the project grows.</li>
                                        <li><strong><em>Dependency Injection - </em></strong>is a pattern to allow your application to&nbsp;inject&nbsp;objects on the fly to classes that need them, without forcing those classes to be responsible for those objects.</li>
                                        <li><strong><em>Unit Tests</em></strong></li>
                                        </ul>]]>
    </string>
</resources>
